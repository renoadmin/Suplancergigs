datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  bids                     Bid[]
  bio                      String?
  createdAt                DateTime      @default(now())
  email                    String        @unique
  id                       String        @id @default(cuid())
  jobs                     Job[]
  location                 String?
  name                     String?       @unique
  receivedMessages         Message[]     @relation(name: "receivedMessages")
  reviewsAsClient          Review[]      @relation(name: "reviewsAsClient")
  reviewsAsFreelancer      Review[]      @relation(name: "reviewsAsFreelancer")
  role                     EnumUserRole
  sentMessages             Message[]     @relation(name: "sender")
  transactionsAsClient     Transaction[] @relation(name: "transactionsAsClient")
  transactionsAsFreelancer Transaction[] @relation(name: "transactionsAsFreelancer")
}

model Skill {
  description String?
  id          String  @id @default(cuid())
  name        String
}

model Job {
  bids         Bid[]
  budget       Float
  client       User          @relation(fields: [clientId], references: [id])
  clientId     String
  createdAt    DateTime      @default(now())
  description  String
  id           String        @id @default(cuid())
  reviews      Review[]
  title        String
  transactions Transaction[]
}

model Bid {
  amount       Float
  createdAt    DateTime @default(now())
  freelancer   User     @relation(fields: [freelancerId], references: [id])
  freelancerId String
  id           String   @id @default(cuid())
  job          Job      @relation(fields: [jobId], references: [id])
  jobId        String
  proposal     String
}

model Message {
  content    String
  id         String   @id @default(cuid())
  receiver   User     @relation(name: "receivedMessages", fields: [receiverId], references: [id])
  receiverId String
  sender     User     @relation(name: "sender", fields: [senderId], references: [id])
  senderId   String
  sentAt     DateTime @default(now())
}

model Review {
  client       User     @relation(name: "reviewsAsClient", fields: [clientId], references: [id])
  clientId     String
  content      String
  createdAt    DateTime @default(now())
  freelancer   User     @relation(name: "reviewsAsFreelancer", fields: [freelancerId], references: [id])
  freelancerId String
  id           String   @id @default(cuid())
  job          Job      @relation(fields: [jobId], references: [id])
  jobId        String
  rating       String
}

model Transaction {
  amount          Float
  client          User     @relation(name: "transactionsAsClient", fields: [clientId], references: [id])
  clientId        String
  freelancer      User     @relation(name: "transactionsAsFreelancer", fields: [freelancerId], references: [id])
  freelancerId    String
  id              String   @id @default(cuid())
  job             Job      @relation(fields: [jobId], references: [id])
  jobId           String
  transactionDate DateTime @default(now())
}

enum EnumUserRole {
  CLIENT
  FREELANCER
}
